from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import ADMIN_ID
from info.info import Info

router = Router()


class RentProcess(StatesGroup):
    rules_confirmation = State()
    account_age = State()
    notifications_on = State()
    send_screenshot = State()
    send_login = State()
    send_password = State()
    send_city = State()
    send_user_agent = State()


rules_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="‚úÖ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω")]],
    resize_keyboard=True
)

account_age_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]],
    resize_keyboard=True
)

notification_on = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')]],
    resize_keyboard=True
)


@router.message(F.text == "‚ùó –°–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –∞—Ä–µ–Ω–¥—É ‚ùó")
async def ask_rules(message: types.Message, state: FSMContext):
    await message.answer("<b>–í—ã –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞—Ä–µ–Ω–¥—ã?</b>",
                         reply_markup=rules_keyboard,
                         parse_mode='HTML')
    await state.set_state(RentProcess.rules_confirmation)


@router.message(lambda msg: msg.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
async def rules_info(message: types.Message):
    await message.answer(Info.rules)


@router.message(RentProcess.account_age, F.text == "‚ùå –ù–µ—Ç")
async def reject_account(message: types.Message, state: FSMContext):
    await message.answer("<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. \n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start</b>",
                         reply_markup=types.ReplyKeyboardRemove(),
                         parse_mode='HTML')
    await state.clear()


@router.message(RentProcess.rules_confirmation, F.text == "‚úÖ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω")
async def ask_account_age(message: types.Message, state: FSMContext):
    await message.answer("<b>–í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –µ—Å—Ç—å 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?</b>",
                         reply_markup=account_age_keyboard,
                         parse_mode='HTML')
    await state.set_state(RentProcess.account_age)


@router.message(RentProcess.account_age, F.text == "‚úÖ –î–∞")
async def ask_account_age(message: types.Message, state: FSMContext):
    await message.answer(Info.notification,
                         reply_markup=notification_on,
                         parse_mode='HTML')
    await state.set_state(RentProcess.notifications_on)


@router.message(RentProcess.notifications_on, F.text == '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
async def request_screenshot(message: types.Message, state: FSMContext):
    await message.answer_photo(photo=Info.image,
                               caption="<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ. "
                                       "‚ùóÔ∏è–§–æ—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º.</b>",
                               parse_mode='HTML',
                               reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RentProcess.send_screenshot)


@router.message(RentProcess.send_screenshot, F.photo)
async def forward_screenshot(message: types.Message, state: FSMContext):
    await state.update_data(screenshot=message.photo[-1].file_id)
    await message.answer('<b>–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ?</b>'
                         '\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–¥—Ä–µ—Å–∞". '
                         '\n\n–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <b>–ú–æ—Å–∫–≤–∞</b>',
                         parse_mode='HTML')
    await state.set_state(RentProcess.send_city)


@router.message(RentProcess.send_city)
async def receive_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìû <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</b> "
                         "\n\n–õ–æ–≥–∏–Ω - —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. "
                         "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."
                         "\n\n<b>–ü—Ä–∏–º–µ—Ä: 79999999999</b>",
                         parse_mode='HTML')
    await state.set_state(RentProcess.send_login)


@router.message(RentProcess.send_login, F.text.regexp(r"^7\d{10}$"))
async def receive_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer(Info.password,
                         parse_mode='HTML')
    await state.set_state(RentProcess.send_password)


@router.message(RentProcess.send_login)
async def invalid_login(message: types.Message):
    await message.answer('‚ùóÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùóÔ∏è'
                         '\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Å —Ü–∏—Ñ—Ä—ã 7 –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä.'
                         '\n\n<b>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 79999999999</b>',
                         parse_mode="HTML")


@router.message(RentProcess.send_password)
async def receive_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    await message.answer(Info.user_agent,
                         parse_mode="HTML")
    await state.set_state(RentProcess.send_user_agent)


@router.message(RentProcess.send_user_agent)
async def receive_user_agent(message: types.Message, state: FSMContext, bot):
    user_data = await state.get_data()

    city = user_data.get("city")
    login = user_data.get("login")
    password = user_data.get("password")
    user_agent = message.text
    screenshot = user_data.get("screenshot")
    tg_username = message.from_user.username or None
    tg_id = str(message.from_user.id)

    admin_message = (
        f"üì© <b>–û –±–∞—Ä–∞–Ω—á–∏–∫–∞ –ø—Ä–∏–∂–∞–ª–∏!</b>\n\n"
        f"–¢–ì: @{tg_username}\n"
        f"–¢–ì id: @{tg_id}\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üìû <b>–õ–æ–≥–∏–Ω:</b> {login}\n"
        f"üîë <b>–ü–∞—Ä–æ–ª—å:</b> {password}\n\n"
        f"üñ• <b>User-Agent:</b>\n{user_agent}"
    )

    await bot.send_photo(ADMIN_ID, screenshot, caption=admin_message, parse_mode="HTML")
    await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()
